package training.iqgateway.pharma;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/")
@CrossOrigin(origins = "http://localhost:3000" )
public class HomeController {

	
	
	@Autowired
	OrderReportsService OrderServiceRef;
	
	@PostMapping("/")
	public void SetStatusofOrder(){
		
		Date currentDate =new Date();
		List<OrderReportsEO> AllOrders= OrderServiceRef.findAllOrders();
		
		if(!AllOrders.isEmpty()){
		for (Iterator iterator = AllOrders.iterator(); iterator.hasNext();) {
			OrderReportsEO orderReportsEO = (OrderReportsEO) iterator.next();
			
			Date orderDate=orderReportsEO.getOrderDate();
			
			long timeDifference = orderDate.getTime() - currentDate.getTime();
	        long oneDayMillis = 24 * 60 * 60 * 1000; // One day in milliseconds 
	       String status =orderReportsEO.getStatus();
	        if (timeDifference == 0) {
	          status = "Processing";
	        } else if (timeDifference <= oneDayMillis) {
	           status = "Shipped";
	        } else if (timeDifference <= 2 * oneDayMillis) {
	           status = "Delivered";
	        } else {
	           status = "Unknown";
	        }
	        orderReportsEO.setStatus(status);
	        OrderServiceRef.placeOrder(orderReportsEO);
	        
		}
		}
		else
		{
			System.out.println("Error");
		}
		}
	
	
	@PostMapping(value={"/placenewOrder/{quantity}"})
	public OrderReportsEO placeNewOrder(@PathVariable("quantity") String Quant ,@RequestBody OrderReportsEO Order)
	{
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, 2); // Adding 2 days
        Date dayAfterTomorrow = calendar.getTime();
		Order.setOrderDate(new Date());
		Order.setDeliveryDate(dayAfterTomorrow);
		Order.setQuantity(Quant);
		System.out.println(Order.getQuantity());
		OrderReportsEO OrderDetails= OrderServiceRef.placeOrder(Order);
		return OrderDetails;
		
	}
	@GetMapping(value="/findAllOrders/")
	public List<OrderReportsEO> getAllOrders(){
		
		List<OrderReportsEO> getOrders=OrderServiceRef.findAllOrders();
		
		return getOrders;
	}
}
